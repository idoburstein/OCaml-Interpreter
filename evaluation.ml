(* 
                         OCaml Interpreter
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = [] ;;

    let close (exp : expr) (env : env) : value =
      Closure (exp, env) ;;

    let lookup (env : env) (varname : varid) : value =
      let va = List.assoc_opt varname env in
      if va = None then raise (EvalError "free variable")
      else !(Option.get va) ;;

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let new_env = List.remove_assoc varname env in
      (varname, loc) :: new_env ;;

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> 
          if printenvp then exp_to_concrete_string exp ^ " where " ^ 
                            env_to_string env
          else exp_to_concrete_string exp

    and env_to_string (env : env) : string =
      match env with
      | [] -> "[ ]" 
      | (vari, valu) :: tl -> 
          "[" ^ vari ^ " |-> " ^ value_to_string !valu ^ "]" ^ " " ^ 
          env_to_string tl ;;
  end
;;

(* Open Env model for easy access *)
open Env;;  


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Val exp ;;

(* Binopeval and unopeval are helper functions for evaluating 
   binop and unop operations *)
let binopeval (op : binop) (v1 : expr) (v2 : expr) : expr =
  match op, v1, v2 with
  | Plus, Num x1, Num x2 -> Num (x1 + x2)
  | Plus, _, _ -> raise (EvalError "Binop Plus error")
  | Minus, Num x1, Num x2 -> Num (x1 - x2)
  | Minus, _, _ -> raise (EvalError "Binop Minus error")
  | Times, Num x1, Num x2 -> Num (x1 * x2) 
  | Times, _, _ -> raise (EvalError "Binop Times error")
  | Division, _, Num 0 -> raise (EvalError "Can't divide by zero")
  | Division, Num x1, Num x2 -> Num (x1 / x2) 
  | Division, _, _ -> raise (EvalError "Binop Division error")
  | Modulo, _, Num 0 -> raise (EvalError "Can't divide by zero")
  | Modulo, Num x1, Num x2 -> Num (x1 mod x2) 
  | Modulo, _, _ -> raise (EvalError "Binop Modulo error")
  | Equals, Num x1, Num x2 -> Bool (x1 = x2)
  | Equals, Bool x1, Bool x2 -> Bool (x1 = x2)
  | Equals, _, _ -> raise (EvalError "Binop Equals error")
  | LessThan, Num x1, Num x2 -> Bool (x1 < x2)
  | LessThan, Bool x1, Bool x2 -> Bool (x1 < x2)
  | LessThan, _, _ -> raise (EvalError "Binop LessThan error")
  | GreaterThan, Num x1, Num x2 -> Bool (x1 > x2)
  | GreaterThan, Bool x1, Bool x2 -> Bool (x1 > x2)
  | GreaterThan, _, _ -> raise (EvalError "Binop GreaterThan error") ;;

let unopeval (op : unop) (e : expr) : expr = 
  match op, e with 
  | Negate, Num x -> Num (~- x)
  | Negate, _ -> raise (EvalError "can't negate non-nums") ;;

(* A helper function to get the expression from a value *)
let get_exp (v : Env.value) : expr = 
  match v with
  | Val e -> e
  | _ -> raise (EvalError "no value") ;;

(* The SUBSTITUTION MODEL evaluator *)

let rec eval_s (exp : expr) (_env : Env.env) : Env.value =  
  match exp with
  | Var _                     
  | Unassigned -> 
      raise (EvalError "unassigned/raise/free variable") 
  | Raise ->
      raise EvalException
  | Bool _            
  | Num _ -> 
      Val exp                                 
  | Unop (neg, e1) -> 
      Val (unopeval neg (get_exp (eval_s e1 _env)))
  | Binop (op, e1, e2) -> 
      Val (binopeval op (get_exp (eval_s e1 _env)) 
                                            (get_exp (eval_s e2 _env)))
  | Conditional (e1, e2, e3) -> 
      if get_exp (eval_s e1 _env) = Bool true then eval_s e2 _env
      else if get_exp (eval_s e1 _env) = Bool false then eval_s e3 _env
      else raise (EvalError "conditional error")
  | App (p, q) ->
      let value = get_exp (eval_s p _env) in
      (match value with
      | Fun(x, b) -> eval_s (subst x (get_exp (eval_s q _env)) b) _env
      | _ -> raise (EvalError "app error"))
  | Fun (v, e1) -> 
      Val (Fun (v, e1))
  | Let (v, def, body) ->
      eval_s (subst v (get_exp(eval_s def _env)) body) _env 
  | Letrec (x, d, b) -> 
      let val_d = eval_s d _env in
      let v = Letrec (x, get_exp val_d, Var (x)) in
      let s = subst x v (get_exp val_d) in
      eval_s (subst x s b) _env ;;


(* Defining a functor to abstract eval_d and eval_s *)
module type EVAL = 
  sig
    val evaulate : expr -> Env.env -> Env.value 
  end ;;

module type ELEMENT = 
  sig
    val func : expr -> Env.env -> Env.value 
  end ;;

module Make_eval (Element : ELEMENT) : EVAL = 
  struct
    let rec evaulate (exp : expr) (env : Env.env) : Env.value =
      match exp with
      | Raise ->
          raise EvalException                   
      | Unassigned -> 
          raise (EvalError "unassigned error") 
      | Var x -> 
          lookup env x
      | Bool _ 
      | Num _ -> 
          Val exp                                 
      | Unop (neg, e1) -> 
          Val (unopeval neg (get_exp (evaulate e1 env)))
      | Binop (op, e1, e2) -> 
          Val (binopeval op (get_exp (evaulate e1 env)) 
                            (get_exp (evaulate e2 env)))
      | Conditional (e1, e2, e3) -> 
          if get_exp (evaulate e1 env) = Bool true then evaulate e2 env
          else if get_exp (evaulate e1 env) = Bool false then evaulate e3 env
          else raise (EvalError "conditional error")
      | Let (v, d, b) -> 
          let val_d = ref (evaulate d env) in
          let new_env = extend env v val_d in
          evaulate b new_env
      | Letrec (x, d, b) -> 
          let new_env_location = ref (Val (Unassigned)) in
          let new_env = extend env x new_env_location in 
          new_env_location := (evaulate d new_env);
          evaulate b new_env
      | Fun (_v, _e1) -> 
          Element.func exp env
      | App (p, q) -> 
          let value = evaulate p env in
          (match value with
          | Val Fun(x, b) -> 
              evaulate (Let (x, get_exp (evaulate q env), b)) env
          | Closure (Fun(x, b), en) -> 
              let val_q = ref (evaulate q env) in
              let new_env = extend en x val_q in
              evaulate b new_env
          | _ -> raise (EvalError "app error"))
end ;;

(* Defining the modules in order to get access to evaluate function *)
module Dynamiceval = 
  Make_eval (struct
    let func (exp : expr) (_env : Env.env) = 
      Val exp
  end) ;; 

module Lexieval = 
  Make_eval (struct
    let func (exp : expr) (env : Env.env) = 
      close exp env
  end) ;;
     

     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
let eval_d (exp : expr) (env : Env.env) : Env.value =
  Dynamiceval.evaulate exp env ;;
       

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator *)
let eval_l (exp : expr) (env : Env.env) : Env.value =
  Lexieval.evaulate exp env ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;